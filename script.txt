-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;
 
 
CREATE TABLE IF NOT EXISTS public.asset_type
(
    asset_type_id integer NOT NULL DEFAULT nextval('typeasset_id_seq'::regclass),
    asset_type_name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT typeasset_pkey PRIMARY KEY (asset_type_id)
);
 
CREATE TABLE IF NOT EXISTS public.assetcurriculum
(
    asset_curriculum_id integer NOT NULL,
    asset_curriculum_name character varying COLLATE pg_catalog."default" NOT NULL,
    curriculum_id integer NOT NULL,
    main_asset_id character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "AssetCurriculum_pkey" PRIMARY KEY (asset_curriculum_id)
);
 
CREATE TABLE IF NOT EXISTS public.curriculum
(
    curriculum_id serial NOT NULL,
    curriculum_name character varying COLLATE pg_catalog."default" NOT NULL,
    department_id integer,
    CONSTRAINT "Curriculum_pkey" PRIMARY KEY (curriculum_id)
);
 
CREATE TABLE IF NOT EXISTS public.department
(
    department_name character varying COLLATE pg_catalog."default" NOT NULL,
    department_id serial NOT NULL,
    CONSTRAINT department_pkey PRIMARY KEY (department_id)
);
 
CREATE TABLE IF NOT EXISTS public.image
(
    image_id integer NOT NULL,
    image_path character varying COLLATE pg_catalog."default" NOT NULL,
    main_asset_id character varying COLLATE pg_catalog."default",
    sub_asset_id character varying COLLATE pg_catalog."default",
    CONSTRAINT "Image_pkey" PRIMARY KEY (image_id)
);
 
CREATE TABLE IF NOT EXISTS public.mainasset
(
    main_asset_id character varying COLLATE pg_catalog."default" NOT NULL,
    main_asset_name character varying COLLATE pg_catalog."default" NOT NULL,
    status character varying COLLATE pg_catalog."default" NOT NULL,
    fiscal_year integer NOT NULL,
    date_received date NOT NULL,
    budget_limit numeric NOT NULL,
    averange_price numeric NOT NULL,
    budget_type character varying COLLATE pg_catalog."default" NOT NULL,
    asset_type character varying COLLATE pg_catalog."default" NOT NULL,
    location_use character varying COLLATE pg_catalog."default" NOT NULL,
    location_deliver character varying COLLATE pg_catalog."default" NOT NULL,
    usage character varying COLLATE pg_catalog."default" NOT NULL,
    responsible_person character varying COLLATE pg_catalog."default" NOT NULL,
    user_id integer,
    department_id integer,
    CONSTRAINT "MainAsset_pkey" PRIMARY KEY (main_asset_id)
);
 
CREATE TABLE IF NOT EXISTS public.role
(
    role_id integer NOT NULL,
    role_name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Role_pkey" PRIMARY KEY (role_id)
);
 
CREATE TABLE IF NOT EXISTS public.subasset
(
    sub_asset_id character varying COLLATE pg_catalog."default" NOT NULL,
    sub_asset_name character varying COLLATE pg_catalog."default" NOT NULL,
    details character varying COLLATE pg_catalog."default" NOT NULL,
    quantity integer NOT NULL,
    unit_price numeric NOT NULL,
    status character varying COLLATE pg_catalog."default" NOT NULL,
    counting_unit character varying COLLATE pg_catalog."default" NOT NULL,
    main_asset_id character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "SubAsset_pkey" PRIMARY KEY (sub_asset_id)
);
 
CREATE TABLE IF NOT EXISTS public."user"
(
    user_id integer NOT NULL,
    user_name character varying COLLATE pg_catalog."default",
    user_email character varying COLLATE pg_catalog."default",
    department_id integer,
    CONSTRAINT user_pkey PRIMARY KEY (user_id)
);
 
CREATE TABLE IF NOT EXISTS public.userrole
(
    user_role_id integer NOT NULL,
    user_role_name character varying COLLATE pg_catalog."default",
    user_id integer,
    role_id integer,
    CONSTRAINT "UserRole_pkey" PRIMARY KEY (user_role_id)
);
 
ALTER TABLE IF EXISTS public.assetcurriculum
    ADD CONSTRAINT "curriculum_ID" FOREIGN KEY (curriculum_id)
    REFERENCES public.curriculum (curriculum_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
 
 
ALTER TABLE IF EXISTS public.assetcurriculum
    ADD CONSTRAINT "main_asset_ID" FOREIGN KEY (main_asset_id)
    REFERENCES public.mainasset (main_asset_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
 
 
ALTER TABLE IF EXISTS public.curriculum
    ADD CONSTRAINT department_id FOREIGN KEY (department_id)
    REFERENCES public.department (department_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
 
 
ALTER TABLE IF EXISTS public.image
    ADD CONSTRAINT "main_asset_ID" FOREIGN KEY (main_asset_id)
    REFERENCES public.mainasset (main_asset_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
 
 
ALTER TABLE IF EXISTS public.image
    ADD CONSTRAINT "sub_asset_ID" FOREIGN KEY (sub_asset_id)
    REFERENCES public.subasset (sub_asset_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
 
 
ALTER TABLE IF EXISTS public.mainasset
    ADD CONSTRAINT "user_ID" FOREIGN KEY (user_id)
    REFERENCES public."user" (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
 
 
ALTER TABLE IF EXISTS public.subasset
    ADD CONSTRAINT "subasset_main_asset_ID_fkey" FOREIGN KEY (main_asset_id)
    REFERENCES public.mainasset (main_asset_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
 
 
ALTER TABLE IF EXISTS public."user"
    ADD CONSTRAINT department_id FOREIGN KEY (department_id)
    REFERENCES public.department (department_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_department_id
    ON public."user"(department_id);
 
 
ALTER TABLE IF EXISTS public.userrole
    ADD CONSTRAINT "role_ID" FOREIGN KEY (role_id)
    REFERENCES public.role (role_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
 
 
ALTER TABLE IF EXISTS public.userrole
    ADD CONSTRAINT "user_ID" FOREIGN KEY (user_id)
    REFERENCES public."user" (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
 
END;

